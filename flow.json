[
    {
        "id": "eb6e5ef1.2cd4b8",
        "type": "tab",
        "label": "Tasmota Zigbee Admin",
        "disabled": false,
        "info": ""
    },
    {
        "id": "14cdd9b2.7c893e",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Probe to get IPs and Infos",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "d1aae5ec.86e0b8",
            "c47b9b62.cbd838",
            "26ce96f1.01c6fa",
            "e6aa019e.cae5e8",
            "75e3c117.755d6"
        ],
        "x": 14,
        "y": 499,
        "w": 622,
        "h": 142
    },
    {
        "id": "351d8dfb.f1bdc2",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Grep Tasmota telemetry",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "2a0c779f.11c12",
            "29793bbb.bc641c",
            "309310f2.10538",
            "3b813b4e.f33614",
            "65252b80.000fa4",
            "90206b3a.200bd",
            "6116f404.1c4e6c"
        ],
        "x": 14,
        "y": 219,
        "w": 412,
        "h": 262
    },
    {
        "id": "4024dea4.ac4f5",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Publish \"zigbeesensor\" single Values to mqtt",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "2453b5cc.8eb68a",
            "d968956a.64de8",
            "d49f93fc.a185"
        ],
        "x": 694,
        "y": 1159,
        "w": 552,
        "h": 122
    },
    {
        "id": "42938028.0eb6e",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Rename Zigbee Devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "e3314c94.a72e5",
            "d0303b49.1ba07",
            "d102618f.4376a",
            "a3c6fd03.1bff78",
            "7d419493.31c42c",
            "4f683e.2b93c7c4",
            "33ba890d.f979ee"
        ],
        "x": 694,
        "y": 519,
        "w": 812,
        "h": 202
    },
    {
        "id": "89e68b6a.47e11",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "All Zigbee Devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "cb97a93c.5c2bd8",
            "604d976c.ca65c",
            "e50a0510.b75ba"
        ],
        "x": 694,
        "y": 379,
        "w": 572,
        "h": 82
    },
    {
        "id": "9a03ede2.5154c8",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Create HomeAssistant auto-discovery for Zigbee Sensors",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "22f21bfe.3df30c",
            "dd5879c4.418648",
            "380815d9.09eb02",
            "b61f7b97.7a3648",
            "4f19af85.fb3458",
            "42b5fb09.d0c1d4",
            "18227de2.7865a2",
            "6ca2f438.a9d07c",
            "480f4619.4a0e5",
            "2a353efa.c97db2",
            "42b8007d.1cbe98"
        ],
        "x": 694,
        "y": 739,
        "w": 712,
        "h": 382
    },
    {
        "id": "a2b56414.ac5658",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "All Tasmota Devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "3b558e12.a47bea",
            "5ebd7809.9c0b58",
            "41ad9a48.328914",
            "5e7b4dc6.a512c4",
            "f8a6cfbd.363e28",
            "f6c18953.c0a0f"
        ],
        "x": 694,
        "y": 39,
        "w": 652,
        "h": 142
    },
    {
        "id": "b6b06348.4c6b7",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Last Seen and Battery Notification",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "d3524de4.46e088",
            "5fa87d5f.454da4",
            "11a69cf5.56e78b",
            "5fd23d71.fc215c",
            "5835ee45.2214a",
            "e0032daa.ca15a8",
            "486aef62.80ee7"
        ],
        "x": 14,
        "y": 659,
        "w": 652,
        "h": 302
    },
    {
        "id": "cd704120.a806e8",
        "type": "group",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Manage Zigbee Bridges",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "c8504930.f7e74",
            "55507632.e9f688",
            "c042419d.741d88",
            "355a2e10.58136a",
            "b0e61c48.e568a8"
        ],
        "x": 694,
        "y": 199,
        "w": 592,
        "h": 162
    },
    {
        "id": "2a0c779f.11c12",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "29793bbb.bc641c",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "topic": "tele/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "309310f2.10538",
                "6116f404.1c4e6c"
            ]
        ]
    },
    {
        "id": "94c13e53.02bbb",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "name": "store Tasmota Info",
        "func": "var devs = flow.get(\"tasmotas\") || {};\n\n// extract devname\nlet devName = msg.topic.split(\"/\")[1];\n\n// get dev by name\nlet dev = devs[devName] || {};\ndev.lastTime = new Date().getTime();\n\n// extract data from msg\nif (msg.topic.includes(\"SENSOR\")) {\n    if (msg.payload.ZbReceived !== undefined) {\n        dev.zigbee = true;\n    } else {\n        dev.zigbee = false;\n        return;\n    }\n} else if (msg.topic.includes(\"STATE\")) {\n    dev.STATE = msg.payload;  \n} else if (msg.topic.includes(\"STATUS5\")) {\n    dev.STATUS5 = msg.payload; \n    dev.link = \"<a href=http://\"+msg.payload.StatusNET.IPAddress+\" target=\\\"_blank\\\">\"+devName+\"</a>\";\n} else if (msg.topic.includes(\"STATUS2\")) {\n    dev.STATUS2 = msg.payload;  \n} else if (msg.topic.includes(\"INFO2\")) {\n    dev.INFO2 = msg.payload; \n    dev.link = \"<a href=http://\"+msg.payload.IPAddress+\" target=\\\"_blank\\\">\"+devName+\"</a>\";\n} else if (msg.payload.ZbState !== undefined) {\n    dev.ZbState = msg.payload.ZbState;  \n    dev.zigbee = true;\n} \n\n// set name/link\ndev.name = devName;\nif (dev.link === undefined) dev.link = dev.name;\n\n// calc last seen\nObject.entries(devs).forEach(element => element[1].seen = Math.round((new Date().getTime()-element[1].lastTime)/60000)+\"m\");\n\n// write back\ndevs[devName] = dev;\nflow.set(\"tasmotas\", devs);\n\nreturn {payload:Object.values(devs)};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 240,
        "wires": [
            [
                "3b558e12.a47bea",
                "c8504930.f7e74"
            ]
        ]
    },
    {
        "id": "309310f2.10538",
        "type": "json",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "94c13e53.02bbb",
                "3b8ec3f4.6dbd44",
                "e6bd37c4.b62a78"
            ]
        ]
    },
    {
        "id": "3b558e12.a47bea",
        "type": "ui_table",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "group": "373ccf52.d5c97",
        "name": "Tasmota Devices",
        "order": 2,
        "width": "8",
        "height": "13",
        "columns": [
            {
                "field": "link",
                "title": "Name",
                "width": "35%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "STATE.Wifi.RSSI",
                "title": "RSSI",
                "width": "10%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "STATUS2.StatusFWR.Version",
                "title": "FW",
                "width": "17%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "STATE.Uptime",
                "title": "Uptime",
                "width": "17%",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seen",
                "title": "Last",
                "width": "12%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "del",
                "title": "Del",
                "width": "3%",
                "align": "right",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 810,
        "y": 80,
        "wires": [
            [
                "5ebd7809.9c0b58"
            ]
        ]
    },
    {
        "id": "3b813b4e.f33614",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "topic": "stat/+/STATUS5",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "309310f2.10538",
                "2a0c779f.11c12"
            ]
        ]
    },
    {
        "id": "c8504930.f7e74",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "cd704120.a806e8",
        "name": "filter Zigbee Bridges",
        "func": "let zbBridges = msg.payload.filter(function(el) {\n      return el.zigbee === true;\n  })\n\nmsg.payload = zbBridges;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 240,
        "wires": [
            [
                "55507632.e9f688",
                "355a2e10.58136a"
            ]
        ]
    },
    {
        "id": "e3314c94.a72e5",
        "type": "ui_dropdown",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "",
        "label": "Device",
        "tooltip": "",
        "place": "",
        "group": "4d67a6b2.8bc0e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "oldname",
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "4f683e.2b93c7c4"
            ]
        ]
    },
    {
        "id": "d0303b49.1ba07",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "extract devicenames",
        "func": "\nmsg.options = msg.payload.map(obj => {\n   var rObj = {};\n   rObj[obj.label] = obj.bridge+\"/\"+obj.Device;\n   return rObj;\n});\n\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "e3314c94.a72e5"
            ]
        ]
    },
    {
        "id": "d1aae5ec.86e0b8",
        "type": "inject",
        "z": "eb6e5ef1.2cd4b8",
        "g": "14cdd9b2.7c893e",
        "name": "Send probe",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "ds",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "c47b9b62.cbd838"
            ]
        ]
    },
    {
        "id": "c47b9b62.cbd838",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "14cdd9b2.7c893e",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 490,
        "y": 540,
        "wires": []
    },
    {
        "id": "3b8ec3f4.6dbd44",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "name": "store zigbee sensors",
        "func": "if (msg.payload.ZbReceived === undefined) return;\n\n// properties that should  show up in the status\nvar inStatus = [\"Contact\", \"Occupancy\", \"Power\", \"Power2\", \"Dimmer\", \"Hue\", \"CT\", \"ColorMode\", \"Sat\", \"RGB\", \"RGBb\", \"Temperature\", \"Humidity\", \"Pressure\", \"LocalTemperature\", \"OccupiedHeatingSetpoint\", \"PIHeatingDemand\", \"Illuminance\", \"AqaraVibrationMode\", \"AqaraVibrationsOrAngle\", \"AqaraVibration505\", \"ZoneStatusChange\", \"AqaraCube\", \"AqaraCubeSide\", \"AqaraCubeFromSide\", \"AqaraRotate\"];\n\n// properties that should not show up in the status\nvar notStatus = [\"Device\", \"Name\", \"BatteryVoltage\", \"BatteryPercentage\", \"LinkQuality\", \"Endpoint\", \"bridge\", \"lastTime\", \"seen\", \"label\", \"status\", \"EurotronicErrors\", \"0201/4008\", \"Xiaomi_64\"];\n\n//node.warn(msg.payload);\n\nvar devs = flow.get(\"t2zdevices\") || {};\n\nvar receivedSensors = []\nfor (var devN in msg.payload.ZbReceived) {\n    let devInfo = msg.payload.ZbReceived[devN];\n    let ID = devInfo.Device;\n    \n    // get dev by ID\n    let dev = devs[ID] || {};\n\n    for (let prop in devInfo) {\n        dev[prop] = devInfo[prop];\n    }\n    \n    if (devInfo.Name!==undefined) {\n        dev.label = devInfo.Name;\n    } else {\n        dev.label = ID; \n    }\n    dev.bridge = msg.topic.split(\"/\")[1];\n    dev.lastTime = new Date().getTime();\n    \n    // create status from properties\n    let status = \"\";\n    for (let prop in dev) {\n        if (inStatus.includes(prop)) {\n            status += \" \"+prop+\": \"+ dev[prop]; \n        }\n    }\n    if (status === \"\") {\n        for (let prop in dev) {\n            if (! notStatus.includes(prop)) {\n                status += \" \"+prop+\": \"+ dev[prop]; \n            }\n        }   \n    }\n    dev.status = status;\n    \n    // write back\n    devs[ID] = dev;\n    receivedSensors.push(dev);\n}\n\nObject.entries(devs).forEach(element => element[1].seen = Math.round((new Date().getTime()-element[1].lastTime)/60000)+\"m\");\n\nflow.set(\"t2zdevices\", devs);\n\nreturn [{payload:Object.values(devs)}, {payload:receivedSensors}];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "cb97a93c.5c2bd8",
                "d0303b49.1ba07"
            ],
            [
                "380815d9.09eb02",
                "42b5fb09.d0c1d4",
                "22f21bfe.3df30c",
                "2453b5cc.8eb68a"
            ]
        ]
    },
    {
        "id": "65252b80.000fa4",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "topic": "tele/+/INFO2",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "90206b3a.200bd",
                "309310f2.10538"
            ]
        ]
    },
    {
        "id": "90206b3a.200bd",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "Info2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 400,
        "wires": []
    },
    {
        "id": "cb97a93c.5c2bd8",
        "type": "ui_table",
        "z": "eb6e5ef1.2cd4b8",
        "g": "89e68b6a.47e11",
        "group": "d325c76.7444a38",
        "name": "Zigbee Devices",
        "order": 1,
        "width": "22",
        "height": "16",
        "columns": [
            {
                "field": "label",
                "title": "Label",
                "width": "15%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Device",
                "title": "Device",
                "width": "8%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "bridge",
                "title": "Bridge",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "LinkQuality",
                "title": "RSSI",
                "width": "6%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "BatteryPercentage",
                "title": "Bat.",
                "width": "6%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seen",
                "title": "Last",
                "width": "6%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "46%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "del",
                "title": "Del",
                "width": "2%",
                "align": "right",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 800,
        "y": 420,
        "wires": [
            [
                "604d976c.ca65c"
            ]
        ]
    },
    {
        "id": "55507632.e9f688",
        "type": "ui_table",
        "z": "eb6e5ef1.2cd4b8",
        "g": "cd704120.a806e8",
        "group": "5b9b9721.b33e6",
        "name": "Zigbee Bridges",
        "order": 0,
        "width": "8",
        "height": "3",
        "columns": [
            {
                "field": "link",
                "title": "Name",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "STATE.Wifi.RSSI",
                "title": "RSSI",
                "width": "12%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seen",
                "title": "Last",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ZbState.Message",
                "title": "ZB Status",
                "width": "45%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1080,
        "y": 240,
        "wires": []
    },
    {
        "id": "d102618f.4376a",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 660,
        "wires": []
    },
    {
        "id": "a3c6fd03.1bff78",
        "type": "ui_button",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "",
        "group": "4d67a6b2.8bc0e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Rename",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "rename",
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "4f683e.2b93c7c4"
            ]
        ]
    },
    {
        "id": "7d419493.31c42c",
        "type": "ui_text_input",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "",
        "label": "New Name",
        "tooltip": "",
        "group": "4d67a6b2.8bc0e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "newname",
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "4f683e.2b93c7c4"
            ]
        ]
    },
    {
        "id": "4f683e.2b93c7c4",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "Rename Zigbee Dev.",
        "func": "let rename = flow.get(\"renameZigbee\") || {};\nflow.set(\"renameZigbee\", rename);\n\nif (msg.topic === \"oldname\" && msg.payload !== \"\") {\n    let vars = msg.payload.split(\"/\");\n    rename.bridge = vars[0];\n    rename.device = vars[1];\n    flow.set(\"renameZigbee\", rename);\n    return;\n} else if (msg.topic === \"newname\") {\n    rename.newname = msg.payload;\n    flow.set(\"renameZigbee\", rename);\n    return;\n} else if (msg.topic === \"rename\") {\n    msg.topic = \"cmnd/\"+rename.bridge+\"/ZbName\";\n    msg.payload = rename.device + \",\" + rename.newname;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1300,
        "y": 580,
        "wires": [
            [
                "ea52f005.796308",
                "33ba890d.f979ee"
            ]
        ]
    },
    {
        "id": "ea52f005.796308",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 1430,
        "y": 460,
        "wires": []
    },
    {
        "id": "33ba890d.f979ee",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "42938028.0eb6e",
        "name": "Clear",
        "func": "flow.set(\"renameZigbee\", {});\ndelete msg.payload;\nmsg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 660,
        "wires": [
            [
                "7d419493.31c42c",
                "d102618f.4376a"
            ]
        ]
    },
    {
        "id": "c042419d.741d88",
        "type": "ui_dropdown",
        "z": "eb6e5ef1.2cd4b8",
        "g": "cd704120.a806e8",
        "name": "",
        "label": "PermitJoin",
        "tooltip": "",
        "place": "",
        "group": "6aae236.d2eeedc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "oldname",
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "b0e61c48.e568a8"
            ]
        ]
    },
    {
        "id": "355a2e10.58136a",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "cd704120.a806e8",
        "name": "extract devicenames",
        "func": "\nmsg.options = msg.payload.map(obj => {\n   return obj.name;\n});\n\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 320,
        "wires": [
            [
                "c042419d.741d88"
            ]
        ]
    },
    {
        "id": "b0e61c48.e568a8",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "cd704120.a806e8",
        "name": "permitJoin",
        "func": "\nmsg.topic = \"cmnd/\"+msg.payload+\"/ZbPermitJoin\";\nmsg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "ea52f005.796308"
            ]
        ]
    },
    {
        "id": "6116f404.1c4e6c",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "351d8dfb.f1bdc2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 260,
        "wires": []
    },
    {
        "id": "e6bd37c4.b62a78",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 380,
        "wires": []
    },
    {
        "id": "8646e2c.9e0f4a",
        "type": "catch",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "scope": [
            "309310f2.10538"
        ],
        "uncaught": false,
        "x": 510,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "55717615.e3e87",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "topic": "stat/+/STATUS2",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "309310f2.10538",
                "90206b3a.200bd"
            ]
        ]
    },
    {
        "id": "5ebd7809.9c0b58",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "name": "",
        "func": "if (msg.topic === \"link\") {\n    return;\n}\n\nif (msg.topic === \"del\") {\n    var devs = flow.get(\"tasmotas\") || {};\n    delete devs[msg.payload.name];\n    return;\n}\n\nmsg.topic = msg.payload.name;\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "f6c18953.c0a0f"
            ]
        ]
    },
    {
        "id": "604d976c.ca65c",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "89e68b6a.47e11",
        "name": "",
        "func": "if (msg.topic === \"del\") {\n    var devs = flow.get(\"t2zdevices\") || {};\n    delete devs[msg.payload.Device];\n    return;\n}\n\nmsg.topic = msg.payload.label;\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 420,
        "wires": [
            [
                "e50a0510.b75ba"
            ]
        ]
    },
    {
        "id": "41ad9a48.328914",
        "type": "ui_form",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "name": "",
        "label": "Sent message to all Tasmota devices",
        "group": "373ccf52.d5c97",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Command",
                "value": "command",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Parameters",
                "value": "params",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "command": "",
            "params": ""
        },
        "payload": "",
        "submit": "send",
        "cancel": "clear",
        "topic": "",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "f8a6cfbd.363e28"
            ]
        ]
    },
    {
        "id": "f8a6cfbd.363e28",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "name": "",
        "func": "\nlet msg1 = {};\nmsg1.topic = \"cmnd/sonoffs/\"+msg.payload.command;\nmsg1.payload = msg.payload.params;\n\nlet msg2 = {};\nmsg2.topic = \"cmnd/tasmotas/\"+msg.payload.command;\nmsg2.payload = msg.payload.params;\n\nreturn [[msg1, msg2]];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "5e7b4dc6.a512c4"
            ]
        ]
    },
    {
        "id": "5e7b4dc6.a512c4",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 1270,
        "y": 140,
        "wires": []
    },
    {
        "id": "f6c18953.c0a0f",
        "type": "ui_toast",
        "z": "eb6e5ef1.2cd4b8",
        "g": "a2b56414.ac5658",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "Tasmota Device Info",
        "x": 1220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e50a0510.b75ba",
        "type": "ui_toast",
        "z": "eb6e5ef1.2cd4b8",
        "g": "89e68b6a.47e11",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "Zigbee Device Info",
        "x": 1150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "26ce96f1.01c6fa",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "14cdd9b2.7c893e",
        "name": "Probe status",
        "func": "\nvar msg1 = { topic:\"cmnd/sonoffs/STATUS\", payload:\"5\" };\nvar msg2 = { topic:\"cmnd/tasmotas/STATUS\", payload:\"5\" };\nvar msg3 = { topic:\"cmnd/sonoffs/STATUS\", payload:\"2\" };\nvar msg4 = { topic:\"cmnd/tasmotas/STATUS\", payload:\"2\" };\nreturn [ [msg1, msg2, msg3, msg4] ];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 540,
        "wires": [
            [
                "c47b9b62.cbd838",
                "75e3c117.755d6"
            ]
        ]
    },
    {
        "id": "e6aa019e.cae5e8",
        "type": "ui_button",
        "z": "eb6e5ef1.2cd4b8",
        "g": "14cdd9b2.7c893e",
        "name": "",
        "group": "373ccf52.d5c97",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "26ce96f1.01c6fa"
            ]
        ]
    },
    {
        "id": "75e3c117.755d6",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "14cdd9b2.7c893e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 600,
        "wires": []
    },
    {
        "id": "22f21bfe.3df30c",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 780,
        "wires": []
    },
    {
        "id": "dd5879c4.418648",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "retained",
        "topic": "",
        "qos": "",
        "retain": "true",
        "broker": "3c0dc680.cc0542",
        "x": 1120,
        "y": 960,
        "wires": []
    },
    {
        "id": "380815d9.09eb02",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "Zigbee Data",
        "func": "//if (msg.payload.ZbReceived === undefined) return;\n\nfor (var devN in msg.payload) {\n    let devInfo = msg.payload[devN];\n\n    let msgDev = {}\n    msgDev.topic = \"zigbee/\"+devInfo.Name\n\n    msgDev.payload = devInfo;\n    node.send(msgDev);\n    \n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 840,
        "wires": [
            [
                "b61f7b97.7a3648",
                "4f19af85.fb3458"
            ]
        ]
    },
    {
        "id": "b61f7b97.7a3648",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 820,
        "wires": []
    },
    {
        "id": "4f19af85.fb3458",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 1110,
        "y": 860,
        "wires": []
    },
    {
        "id": "42b5fb09.d0c1d4",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "Homeassistant Zigbee Discover",
        "func": "//if (msg.payload.ZbReceived === undefined) return;\n\nvar classes = {\n    \"Contact\":{\"type\":\"binary_sensor\", \"devclass\":\"door\", \"unit\":\"\"},\n    \"Occupancy\":{\"type\":\"binary_sensor\", \"devclass\":\"occupancy\", \"unit\":\"\"},\n    \"Power\":{\"type\":\"binary_sensor\", \"devclass\":\"door\", \"unit\":\"\"}, \n    \"Power2\":{\"type\":\"binary_sensor\", \"devclass\":\"door\", \"unit\":\"\"}, \n    \"Temperature\":{\"type\":\"sensor\", \"devclass\":\"temperature\", \"unit\":\"°C\"}, \n    \"Humidity\":{\"type\":\"sensor\", \"devclass\":\"humidity\", \"unit\":\"%\"}, \n    \"Pressure\":{\"type\":\"sensor\", \"devclass\":\"pressure\", \"unit\":\"hPa\"}, \n    \"LocalTemperature\":{\"type\":\"sensor\", \"devclass\":\"temperature\", \"unit\":\"C\"}, \n    \"OccupiedHeatingSetpoint\":{\"type\":\"sensor\", \"devclass\":\"temperature\", \"unit\":\"°C\"}, \n    \"PIHeatingDemand\":{\"type\":\"sensor\", \"devclass\":\"power_factor\", \"unit\":\"%\"}, \n    \"Illuminance\":{\"type\":\"sensor\", \"devclass\":\"illuminance\", \"unit\":\"lm\"}, \n    \"AqaraVibrationMode\":{\"type\":\"sensor\", \"devclass\":\"None\", \"unit\":\"\"}, \n    \"AqaraVibrationsOrAngle\":{\"type\":\"sensor\", \"devclass\":\"None\", \"unit\":\"\"},\n    \"ZoneStatusChange\":{\"type\":\"binary_sensor\", \"devclass\":\"door\", \"unit\":\"\"}\n}\n\n\nfor (var devN in msg.payload) {\n    let devInfo = msg.payload[devN];\n    if (devInfo.Dimmer !== undefined) { // we have a light bulb\n        let msgDev = {}\n        msgDev.topic = \"homeassistant/light/zigbee/\"+devInfo.Name+\"/config\"\n        msgDev.payload = {\n            \"name\": devInfo.Name,\n            \"unique_id\": devInfo.Name,\n            \"command_topic\": \"zigbee/send/\"+devInfo.Name+\"/Power\", \n            \"state_topic\":\"zigbee/\"+devInfo.Name+\"\", \n            \"state_value_template\":\"{{value_json.Power}}\", \n            \"payload_on\":\"1\", \n            \"payload_off\":\"0\", \n            \"brightness_command_topic\":\"zigbee/send/\"+devInfo.Name+\"/Dimmer\", \n            \"brightness_state_topic\":\"zigbee/\"+devInfo.Name+\"\", \n            \"brightness_value_template\":\"{{value_json.Dimmer}}\"\n        };\n        \n        if (devInfo.CT !== undefined) {\n            msgDev.payload[\"color_temp_command_topic\"] = \"zigbee/send/\"+devInfo.Name+\"/CT\";\n            msgDev.payload[\"color_temp_state_topic\"] = \"zigbee/\"+devInfo.Name+\"\";\n            msgDev.payload[\"color_temp_value_template\"] = \"{{value_json.CT}}\";\n        }\n        node.send(msgDev);\n    } else { // create sensors from properties\n        let status = \"\";\n        for (let prop in devInfo) {\n            if (classes.hasOwnProperty(prop)) {\n                let devClass = classes[prop];\n                let msgDev = {}\n                \n                msgDev.payload = {\n                    \"name\": devInfo.Name.replace(/AQ.*_/gm, \"\").replace(\"AQ\", \"\").replace(\"Sonoff\", \"\") + \" \" + prop,\n                    \"unique_id\": devInfo.Name + \"_\" + prop,\n                    \"state_topic\": \"zigbee/\"+devInfo.Name,\n                    \"value_template\": \"{{ value_json.\"+prop+\"}}\"\n                };\n                if (devClass.type===\"sensor\")   msgDev.payload[\"unit_of_measurement\"] = devClass.unit;\n                \n                if (devClass.devclass!==\"None\") msgDev.payload[\"device_class\"] =  devClass.devclass;\n    \n                if (devClass.type===\"sensor\") {\n                    msgDev.topic = \"homeassistant/\"+devClass.type+\"/\"+devInfo.Name+\"/\"+prop+\"/config\"\n                    \n                } else {\n                    msgDev.topic = \"homeassistant/\"+devClass.type+\"/\"+devInfo.Name+\"_\"+prop+\"/config\"\n                    msgDev.payload[\"payload_on\"] =  \"1\";\n                    msgDev.payload[\"payload_off\"] = \"0\";\n                }\n                node.send(msgDev);\n            }\n        }\n    }\n\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 850,
        "y": 940,
        "wires": [
            [
                "18227de2.7865a2",
                "dd5879c4.418648"
            ]
        ]
    },
    {
        "id": "18227de2.7865a2",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 920,
        "wires": []
    },
    {
        "id": "b448259e.862008",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "topic": "tasmota/discovery/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "3f9eab.46a61156"
            ]
        ]
    },
    {
        "id": "3f9eab.46a61156",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Tasmota Discovery",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2453b5cc.8eb68a",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "4024dea4.ac4f5",
        "name": "Zigbee Data Singlevalues",
        "func": "//if (msg.payload.ZbReceived === undefined) return;\n\nfor (var devN in msg.payload) {\n    let devInfo = msg.payload[devN];\n    for (let prop in devInfo) {\n        let msgDev = {}\n        msgDev.topic = \"zigbeesensors/\"+devInfo.Name+\"/\"+prop\n        msgDev.payload =  devInfo[prop];\n        node.send(msgDev);\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 1200,
        "wires": [
            [
                "d49f93fc.a185",
                "d968956a.64de8"
            ]
        ]
    },
    {
        "id": "d968956a.64de8",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "4024dea4.ac4f5",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 1110,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d49f93fc.a185",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "g": "4024dea4.ac4f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d3524de4.46e088",
        "type": "inject",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "Check LastSeen and Battery",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "18000",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 700,
        "wires": [
            [
                "5fa87d5f.454da4",
                "e0032daa.ca15a8"
            ]
        ]
    },
    {
        "id": "5fa87d5f.454da4",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "Check Zigbee lastseen and Battery",
        "func": "\nvar devs = flow.get(\"t2zdevices\") || {};\n\nvar warning = \"\";\nfor (var devN in devs) {\n    let devInfo = devs[devN];\n    //node.warn(devInfo.seen + \" \" + devInfo.BatteryPercentage);\n    if (devInfo.BatteryPercentage !== undefined && devInfo.BatteryPercentage < 25) {\n         //node.warn(devInfo.Name + \" Battery Low: \" + devInfo.BatteryPercentage);\n         warning += \"\\t\" + devInfo.Name + \" battery low : \" + devInfo.BatteryPercentage + \"%\\n\"\n    }\n    if (parseInt(devInfo.seen) > 720) {\n         //node.warn(devInfo.Name + \" seems offline: \" + devInfo.seen);\n         warning += \"\\t\" + devInfo.Name + \" seems offline: \" + devInfo.seen + \"\\n\"\n    }\n}\n\n//node.warn(warning);\nif (warning !== \"\") {\n    msg.payload = \"Zigbee Devices: \" + warning;\n    msg.sound = \"none\";\n    return msg;\n}\n\nreturn null;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "11a69cf5.56e78b",
                "486aef62.80ee7"
            ]
        ]
    },
    {
        "id": "11a69cf5.56e78b",
        "type": "ui_toast",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "position": "top left",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "Device Warning!",
        "x": 460,
        "y": 860,
        "wires": []
    },
    {
        "id": "5fd23d71.fc215c",
        "type": "comment",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "Add your own notification service here:",
        "info": "",
        "x": 490,
        "y": 820,
        "wires": []
    },
    {
        "id": "5835ee45.2214a",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "Check Tasmota lastseen",
        "func": "\n\nvar devs = flow.get(\"tasmotas\") || {};\n\nvar warning = \"\";\nfor (var devN in devs) {\n    let devInfo = devs[devN];\n    //node.warn(devInfo.name + \" \" + devInfo.seen);\n    if (parseInt(devInfo.seen) > 60) {\n         //node.warn(devInfo.name + \" seems offline: \" + devInfo.seen);\n         warning += \"\\t\" + devInfo.name + \" seems offline: \" + devInfo.seen + \"\\n\"\n    }\n}\n\nnode.warn(warning);\nif (warning !== \"\") {\n    msg.payload = \"Tasmota Devices: \" + warning;\n    msg.sound = \"none\";\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "11a69cf5.56e78b",
                "486aef62.80ee7"
            ]
        ]
    },
    {
        "id": "e0032daa.ca15a8",
        "type": "delay",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 240,
        "y": 740,
        "wires": [
            [
                "5835ee45.2214a"
            ]
        ]
    },
    {
        "id": "486aef62.80ee7",
        "type": "link out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "b6b06348.4c6b7",
        "name": "SensorsProblem Notification",
        "links": [
            "764cb81e.ab379"
        ],
        "x": 395,
        "y": 920,
        "wires": []
    },
    {
        "id": "131e424d.803796",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "name": "",
        "topic": "homeassistant/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "c9a3f323.11dc68"
            ]
        ]
    },
    {
        "id": "c9a3f323.11dc68",
        "type": "debug",
        "z": "eb6e5ef1.2cd4b8",
        "name": "Homeassistant Discovery",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6ca2f438.a9d07c",
        "type": "mqtt in",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "topic": "zigbee/send/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "3c0dc680.cc0542",
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "480f4619.4a0e5"
            ]
        ]
    },
    {
        "id": "480f4619.4a0e5",
        "type": "function",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "convert zigbee/send to Tasmota JSon CMD",
        "func": "let tops = msg.topic.split(\"/\");\nlet device = tops[2];\nlet cmd = tops[3];\nlet val = msg.payload;\n\nmsg.payload = '{\"device\":\"'+device+'\", \"send\":{\"'+cmd+'\":\"'+val+'\"}}'\n\nmsg.topic = \"cmnd/ZBBridgeEG2/ZBSend\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1070,
        "y": 1020,
        "wires": [
            [
                "2a353efa.c97db2"
            ]
        ]
    },
    {
        "id": "2a353efa.c97db2",
        "type": "mqtt out",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "3c0dc680.cc0542",
        "x": 1330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "42b8007d.1cbe98",
        "type": "inject",
        "z": "eb6e5ef1.2cd4b8",
        "g": "9a03ede2.5154c8",
        "name": "SetOption19=0 -> use Tasmota integration (default)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "cmnd/tasmotas/SetOption19",
        "payload": "0",
        "payloadType": "str",
        "x": 940,
        "y": 1080,
        "wires": [
            [
                "2a353efa.c97db2"
            ]
        ]
    },
    {
        "id": "3c0dc680.cc0542",
        "type": "mqtt-broker",
        "name": "homeserver localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "node-red",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "373ccf52.d5c97",
        "type": "ui_group",
        "name": "Tasmota Devices",
        "tab": "abe3d4c.9322328",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "4d67a6b2.8bc0e",
        "type": "ui_group",
        "name": "Rename Zigbee Device",
        "tab": "abe3d4c.9322328",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "d325c76.7444a38",
        "type": "ui_group",
        "name": "Zigbee Devices",
        "tab": "abe3d4c.9322328",
        "order": 3,
        "disp": true,
        "width": "22",
        "collapse": false
    },
    {
        "id": "5b9b9721.b33e6",
        "type": "ui_group",
        "name": "Tasmota Zigbee Bridges",
        "tab": "abe3d4c.9322328",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "6aae236.d2eeedc",
        "type": "ui_group",
        "name": "Manage Zigbee Bridges",
        "tab": "abe3d4c.9322328",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "abe3d4c.9322328",
        "type": "ui_tab",
        "name": "Tasmota Zigbee Admin",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
